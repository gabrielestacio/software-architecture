Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } } package teste { import SysADL.types ; value type valueTypeTest { unit = unitTest dimension = dimensionTest } datatype dataTypeTest { attributes : AttributeTest : valueTypeTest ; } enum enumTest { ^in } dimension dimensionTest unit unitTest { dimension = dimensionTest } value type newValueType extends valueTypeTest { } value type newValueType extends valueTypeTest { } port def newPortOP { flow out dataTypeTest } connector def connectorTest { participants : ~ newPort : compositePortTestI2O ; ~ newPort : compositePortTestO2I ; flows : dataTypeTest from newPort to newPort } port def newPortIP { flow in dataTypeTest } port def compositePortTestO2I { ports : port1 : newPortOP ; port2 : newPortIP ; } port def compositePortTestI2O { ports : port1 : newPortIP ; port2 : newPortOP ; } }